{"ast":null,"code":"var _jsxFileName = \"/Users/shakalee/Desktop/shaka.github.io/src/ThemeContext.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    const storedPrefs = window.localStorage.getItem('color-theme');\n\n    if (typeof storedPrefs === 'string') {\n      return storedPrefs;\n    }\n\n    const userMedia = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (userMedia.matches) {\n      return 'dark';\n    }\n  }\n\n  return 'light'; // light theme as the default;\n};\n\nexport const ThemeContext = /*#__PURE__*/React.createContext();\nexport const ThemeProvider = ({\n  initialTheme,\n  children\n}) => {\n  _s();\n\n  const [theme, setTheme] = React.useState(getInitialTheme);\n\n  const rawSetTheme = rawTheme => {\n    const root = window.document.documentElement;\n    const isDark = rawTheme === 'dark';\n    root.classList.remove(isDark ? 'light' : 'dark');\n    root.classList.add(rawTheme);\n    localStorage.setItem('color-theme', rawTheme);\n  };\n\n  if (initialTheme) {\n    rawSetTheme(initialTheme);\n  }\n\n  React.useEffect(() => {\n    rawSetTheme(theme);\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThemeProvider, \"DZ93y6MoushHNJ3xDqNSOypNhgY=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/shakalee/Desktop/shaka.github.io/src/ThemeContext.js"],"names":["React","getInitialTheme","window","localStorage","storedPrefs","getItem","userMedia","matchMedia","matches","ThemeContext","createContext","ThemeProvider","initialTheme","children","theme","setTheme","useState","rawSetTheme","rawTheme","root","document","documentElement","isDark","classList","remove","add","setItem","useEffect"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC1B,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,YAA5C,EAA0D;AACtD,UAAMC,WAAW,GAAGF,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,aAA5B,CAApB;;AACA,QAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC;AACjC,aAAOA,WAAP;AACH;;AAED,UAAME,SAAS,GAAGJ,MAAM,CAACK,UAAP,CAAkB,8BAAlB,CAAlB;;AACA,QAAID,SAAS,CAACE,OAAd,EAAuB;AACnB,aAAO,MAAP;AACH;AACJ;;AAED,SAAO,OAAP,CAb0B,CAaX;AAClB,CAdD;;AAgBA,OAAO,MAAMC,YAAY,gBAAGT,KAAK,CAACU,aAAN,EAArB;AAEP,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAgC;AAAA;;AACzD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,KAAK,CAACgB,QAAN,CAAef,eAAf,CAA1B;;AAEA,QAAMgB,WAAW,GAAIC,QAAD,IAAc;AAC9B,UAAMC,IAAI,GAAGjB,MAAM,CAACkB,QAAP,CAAgBC,eAA7B;AACA,UAAMC,MAAM,GAAGJ,QAAQ,KAAK,MAA5B;AAEAC,IAAAA,IAAI,CAACI,SAAL,CAAeC,MAAf,CAAsBF,MAAM,GAAG,OAAH,GAAa,MAAzC;AACAH,IAAAA,IAAI,CAACI,SAAL,CAAeE,GAAf,CAAmBP,QAAnB;AAEAf,IAAAA,YAAY,CAACuB,OAAb,CAAqB,aAArB,EAAoCR,QAApC;AACH,GARD;;AAUA,MAAIN,YAAJ,EAAkB;AACdK,IAAAA,WAAW,CAACL,YAAD,CAAX;AACH;;AAEDZ,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM;AAClBV,IAAAA,WAAW,CAACH,KAAD,CAAX;AACH,GAFD,EAEG,CAACA,KAAD,CAFH;AAIA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA9B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BM;;GAAMF,a;;KAAAA,a","sourcesContent":["import React from 'react';\n\nconst getInitialTheme = () => {\n    if (typeof window !== 'undefined' && window.localStorage) {\n        const storedPrefs = window.localStorage.getItem('color-theme');\n        if (typeof storedPrefs === 'string') {\n            return storedPrefs;\n        }\n\n        const userMedia = window.matchMedia('(prefers-color-scheme: dark)');\n        if (userMedia.matches) {\n            return 'dark';\n        }\n    }\n\n    return 'light' // light theme as the default;\n};\n\nexport const ThemeContext = React.createContext();\n\nexport const ThemeProvider = ({ initialTheme, children }) => {\n    const [theme, setTheme] = React.useState(getInitialTheme);\n\n    const rawSetTheme = (rawTheme) => {\n        const root = window.document.documentElement;\n        const isDark = rawTheme === 'dark';\n\n        root.classList.remove(isDark ? 'light' : 'dark');\n        root.classList.add(rawTheme);\n\n        localStorage.setItem('color-theme', rawTheme);\n    };\n\n    if (initialTheme) {\n        rawSetTheme(initialTheme);\n    }\n\n    React.useEffect(() => {\n        rawSetTheme(theme);\n    }, [theme]);\n\n    return (\n        <ThemeContext.Provider value={{ theme, setTheme }}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}